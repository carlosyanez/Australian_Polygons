wellspell.addin:::gramcheck()
wellspell.addin:::gramcheck()
x_bar <-  1.1692935
s_2   <-  0.8708521
n <- 19
t_0975 <- qt(0.975,n-1)
s      <-  sqrt(s_2)
round(x_bar + c(-1,1)*t_0975*s/sqrt(n),3)
lower_bound <- 0.02250397
upper_bound <- 0.45124552
point_estimate<- (lower_bound + upper_bound)/2
round(point_estimate,2)
r2 <- sxy^2/(sxx*syy)
#Question 3
x_bar = 131.00
y_bar= 28.3
sxx = 262
syy= 44.38
sxy = 103.9
r2 <- sxy^2/(sxx*syy)
round(r2,4)
Height <-c(129,140,	124,	123,	139)
Weight <-c(28.6,	31.8,	26.1,	23.9,	31.1)
mean(Height)
mean(Weight)
corr(Height.weight)
r <- sxy/sqrt(sxx*syy)
round(r2,4)
r <- sxy/sqrt(sxx*syy)
round(r2,4)
r <- sxy/sqrt(sxx*syy)
round(r,4)
cor(Height,Weight)
h_body<-0.55 #kg
beta_0 <- 2.09971
beta_1<- 0.76271
log_h_brain <- beta_0 + beta_1*log(h_body)
exp(log_h_brain)
round(exp(log_h_brain),4)
#Question 4
beta_1_estimate <- 1.9900
beta_1_s_error <- 0.3921
#h_0 =2
t_value <- (beta_1_estimate -2)/beta_1_s_error
t_value
beta_1_estimate <- 1.9900
beta_1_s_error <- 0.3921
d_freedom <- 27
b_interval <- beta_1_estimate + c(1,-1)*t_0975*beta_1_s_error
t_0975 <- qt(0.975,d_freedom)
b_interval <- beta_1_estimate + c(1,-1)*t_0975*beta_1_s_error
round(b_interval,2)
b_interval <- beta_1_estimate + c(-1,1)*t_0975*beta_1_s_error
round(b_interval,2)
XTX_inv <- matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669 -0.01481414  0.15553155),nrow=3,ncol=3)
XTX_inv <- matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669, -0.01481414,  0.15553155)
XTX_inv
matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669, -0.01481414,  0.15553155),nrow=3,ncol=3)
XTX_inv <- matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669, -0.01481414,  0.15553155),nrow=3,ncol=3)
XTX_inv
t_stat <- (beta_1_estimate -2)/beta_1_s_error
t_stat
h_body<-0.55 #kg
beta_0 <- 2.09971
beta_1<- 0.76271
SER <- 0.6631
n <- 45
p <- 2
TSS <- 271.2082
SSR <- SER^2*(n-p)
R2 <- 1 - SSR/TSS
round(R2,4)
t_value <- 23.95
t_value_beta_1 <- 23.95
#t = X_bar - X_true /(se)
se_beta_1 <- (beta_1-0)/t_value_beta_1
round(se_beta_1,5)
t_value_beta_0 <- (beta_0-0)/se_beta_0
round(t_value_beta_0,5)
se_beta_0
se_beta_0<-0.10869
t_value_beta_0 <- (beta_0-0)/se_beta_0
round(t_value_beta_0,5)
beta_0_estimate <-12.9398
beta_1_estimate <- 1.9900
beta_2_estimate <- 3.5793
beta_0_s_error <-  2.0209
beta_1_s_error <- 0.3921
beta_2_s_error <- 0.3352
d_freedom <- 27
XTX_inv <- matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669, -0.01481414,  0.15553155),nrow=3,ncol=3)
#h_0 =2
t_stat <- (beta_1_estimate -2)/beta_1_s_error
t_stat
?qt
pt(t_stat, 27)
t_stat
2*pt(-abs(t_stat),df=27)
2*pt(-abs(t_stat),df=27)
pvalue <- 2*pt(-abs(t_stat),df=27)
round(pvalue,4)
t_stat
round(t_stat,4)
b <- matrix(c(1,4,6),ncol=1)
b
XTX_inv <- matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669, -0.01481414,  0.15553155),nrow=3,ncol=3)
t(b)
t_0975 <- qt(0.975,d_freedom)
b <- matrix(c(1,4,6),ncol=1)
beta_hat <- matrix(c(beta_0_estimate,beta_1_estimate,beta_2_estimate),ncol=1)
RSS <- 0.722 # from annova table
t(b)*beta_hat +c(-1,1)*t_0975*sqrt((RSS/d_freedom)*t(b)*XTX_inv*solve(b))
beta_hat
t(b)
t(b)*beta_hat
pred_interal <- t(b)%*%beta_hat +c(-1,1)*t_0975*sqrt((RSS/d_freedom)*t(b)%*%XTX_inv%*%solve(b))
solve(b)
pred_interal <- t(b)%*%beta_hat +c(-1,1)*t_0975*sqrt((RSS/d_freedom)*t(b)%*%XTX_inv%*%b)
t(b)%*%XTX_inv%*%b
(RSS/d_freedom)*t(b)%*%XTX_inv%*%b
sqrt((RSS/d_freedom)*t(b)%*%XTX_inv%*%b)
t_0975*sqrt((RSS/d_freedom)*t(b)%*%XTX_inv%*%b)
t(b)%*%beta_hat
t_0975*sqrt((RSS/d_freedom)*t(b)%*%XTX_inv%*%b)
c(-1,1)*t_0975*sqrt((RSS/d_freedom)*t(b)%*%XTX_inv%*%b)
pred_interal
round(pred_interal,4)
pred_interal <- t(b)%*%beta_hat + c(-1,1)*t_0975*sqrt((RSS/d_freedom)*(1+t(b)%*%XTX_inv%*%b))
round(pred_interal,4)
round(pred_interal,2)
Height <-c(129,140,	124,	123,	139)
Weight <-c(28.6,	31.8,	26.1,	23.9,	31.1)
x_bar = 131.00
y_bar= 28.3
sxx = 262
syy= 44.38
sxy = 103.9
r <- sxy/sqrt(sxx*syy)
round(r,4)
cor(Height,Weight)
beta_0_estimate <-12.9398
beta_1_estimate <- 1.9900
beta_2_estimate <- 3.5793
beta_0_s_error <-  2.0209
beta_1_s_error <- 0.3921
beta_2_s_error <- 0.3352
d_freedom <- 27
XTX_inv <- matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669, -0.01481414,  0.15553155),nrow=3,ncol=3)
XTX_inv <- matrix(data=c( 5.6539155, -0.61660531, -0.72676694,
-0.6166053,  0.21285205, -0.01481414,
-0.7267669, -0.01481414,  0.15553155),nrow=3,ncol=3)
XTX_inv
t_stat <- (beta_1_estimate -2)/beta_1_s_error
round(t_stat,4)
pvalue <- 2*pt(-abs(t_stat),df=27)
round(pvalue,4)
t_0975 <- qt(0.975,d_freedom)
b_interval <- beta_1_estimate + c(-1,1)*t_0975*beta_1_s_error
round(b_interval,2)
b <- matrix(c(1,4,6),ncol=1)
beta_hat <- matrix(c(beta_0_estimate,beta_1_estimate,beta_2_estimate),ncol=1)
RSS <- 0.722 # from annova table
pred_interal <- t(b)%*%beta_hat + c(-1,1)*t_0975*sqrt((RSS/d_freedom)*(1+t(b)%*%XTX_inv%*%b))
round(pred_interal,2)
#hedgehog's brain
h_body<-0.55 #kg
beta_0 <- 2.09971
beta_1<- 0.76271
SER <- 0.6631
se_beta_0<-0.10869
n <- 45
p <- 2
t_value_beta_1 <- 23.95
TSS <- 271.2082
#hedgehog's brain
h_body<-0.55 #kg
beta_0 <- 2.09971
beta_1<- 0.76271
SER <- 0.6631
se_beta_0<-0.10869
n <- 45
p <- 2
t_value_beta_1 <- 23.95
TSS <- 271.2082
SSR <- SER^2*(n-p)
R2 <- 1 - SSR/TSS
round(R2,4)
se_beta_1 <- (beta_1-0)/t_value_beta_1
round(se_beta_1,5)
round(se_beta_1,4)
t_value_beta_0 <- (beta_0-0)/se_beta_0
round(t_value_beta_0,4)
log_h_brain <- beta_0 + beta_1*log(h_body)  #log(g)
round(exp(log_h_brain),4)
beta_1*log(h_body)
setwd("~/Google Drive/GitHub/Australian_Polygons")
lga_loc_poa <- readRDS("~/Google Drive/GitHub/Australian_Polygons/nsw/lga_loc_poa.rds")
pacman::p_load("tidyverse","rgdal","sf","lwgeom","spdep","geojsonsf","rgeos","smoothr",
"rvest","xml2","stringi","units","absmapsdata")
locs <- loc_lga_poa %>%
group_by(LOC_PID,LOCALITY,State.Region,Metro.Region,State) %>%
summarise(.groups="drop")
lgas <- loc_lga_poa %>%
group_by(LGA_PID,LGA,State.Region,Metro.Region,State) %>%
summarise(.groups="drop")
poas <- loc_lga_poa %>%
group_by(POA_CODE16,State.Region,Metro.Region,State) %>%
summarise(.groups="drop")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
pacman::p_load("tidyverse","rgdal","sf","lwgeom","spdep","geojsonsf","rgeos","smoothr",
"rvest","xml2","stringi","units","absmapsdata")
lgas <- loc_lga_poa %>%
group_by(LGA_PID,LGA,State.Region,Metro.Region,State) %>%
summarise(.groups="drop")
View(lga_loc_poa)
loc_lga_poa <- lga_loc_poa
lgas <- loc_lga_poa %>%
group_by(LGA_PID,LGA,State.Region,Metro.Region,State) %>%
summarise(.groups="drop")
rm("lga_loc_poa")
saveRDS(lgas,str_c(State_folder,"lgas.rds"))
State_folder <- "nsw/"
saveRDS(lgas,str_c(State_folder,"lgas.rds"))
locs <- loc_lga_poa %>%
group_by(LOC_PID,LOCALITY,State.Region,Metro.Region,State) %>%
summarise(.groups="drop")
saveRDS(locs,str_c(State_folder,"locs.rds"))
poas <- loc_lga_poa %>%
group_by(POA_CODE16,State.Region,Metro.Region,State) %>%
summarise(.groups="drop")
saveRDS(poas,str_c(State_folder,"poas.rds"))
rm(poas,locs)
regions <-lgas %>%
group_by(State.Region) %>%
summarise(.groups="drop")  %>%
st_cast("MULTILINESTRING") %>% st_cast("LINESTRING") %>%
st_collection_extract("LINESTRING") %>%
st_polygonize() %>%
mutate(AREA=st_area(.), RELEVANT=(AREA>area_tolerance)) %>%
filter(RELEVANT) %>%
group_by(State.Region) %>%
summarise(.groups="drop")
## get list of  councils across state
area_tolerance <-set_units(10^4,m^2)
regions <-lgas %>%
group_by(State.Region) %>%
summarise(.groups="drop")  %>%
st_cast("MULTILINESTRING") %>% st_cast("LINESTRING") %>%
st_collection_extract("LINESTRING") %>%
st_polygonize() %>%
mutate(AREA=st_area(.), RELEVANT=(AREA>area_tolerance)) %>%
filter(RELEVANT) %>%
group_by(State.Region) %>%
summarise(.groups="drop")
state <- regions %>%
group_by(State) %>%
summarise(.groups="drop")  %>%
st_cast("MULTILINESTRING") %>% st_cast("LINESTRING") %>%
st_collection_extract("LINESTRING") %>%
st_polygonize() %>%
mutate(AREA=st_area(.), RELEVANT=(AREA>area_tolerance)) %>%
filter(RELEVANT) %>%
group_by(State) %>%
summarise(.groups="drop")
regions <-lgas %>%
group_by(State,State.Region) %>%
summarise(.groups="drop")  %>%
st_cast("MULTILINESTRING") %>% st_cast("LINESTRING") %>%
st_collection_extract("LINESTRING") %>%
st_polygonize() %>%
mutate(AREA=st_area(.), RELEVANT=(AREA>area_tolerance)) %>%
filter(RELEVANT) %>%
group_by(State,State.Region) %>%
summarise(.groups="drop")
state <- regions %>%
group_by(State) %>%
summarise(.groups="drop")  %>%
st_cast("MULTILINESTRING") %>% st_cast("LINESTRING") %>%
st_collection_extract("LINESTRING") %>%
st_polygonize() %>%
mutate(AREA=st_area(.), RELEVANT=(AREA>area_tolerance)) %>%
filter(RELEVANT) %>%
group_by(State) %>%
summarise(.groups="drop")
plot(state %>% select(State))
saveRDS(state,str_c(State_folder,"state.rds"))
setwd("~/Google Drive/GitHub/Australian_Polygons")
nsw <- readRDS("nsw/lga_loc_poa.rds") %>% filter(LGA=="Albury")
e
(tidyverse)
library(tidyverse)
library(sf)
nsw <- readRDS("nsw/lga_loc_poa.rds") %>% filter(LGA=="Albury")
vic <- readRDS("vic/lga_loc_poa.rds") %>% filter(LGA=="Wodonga")
mapdata %>% ggplot() + geom_sf(aes(y=Locality))
mapdata <- rbind(nsw,vic)
mapdata %>% ggplot() + geom_sf(aes(y=Locality))
mapdata %>% ggplot() + geom_sf(aes(fil=Locality))
mapdata %>% ggplot() + geom_sf(aes(fill=Locality))
mapdata %>% ggplot() + geom_sf(aes(fill=LOCALITY))
mapdata
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>% summarise(.groups = "drop")
mapdata %>% ggplot() + geom_sf(aes(fill=POA_CODE16))
library(smoothr)
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
drop_crumbs(threshold = units::set_units(10^4,m^2))
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
str_extract("POLYGON") %>%
drop_crumbs(threshold = units::set_units(10^4,m^2))
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
str_extract("POLYGON") %>%
drop_crumbs(.,threshold = units::set_units(10^4,m^2))
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
str_extract("POLYGON")
mapdata %>% ggplot() + geom_sf(aes(fill=POA_CODE16))
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
st_collection_extract("POLYGON") %>%
drop_crumbs(.,threshold = units::set_units(10^4,m^2))
library(tidyverse)
mapdata %>% ggplot() + geom_sf(aes(fill=POA_CODE16))
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
st_collection_extract("POLYGON") %>%
drop_crumbs(.,threshold = units::set_units(10^5,m^2))
mapdata %>% ggplot() + geom_sf(aes(fill=POA_CODE16))
mapdata %>% ggplot() + geom_sf(aes(fill=POA_CODE16)) +customthemes::custom_map_theme()
nsw <- readRDS("nsw/lga_loc_poa.rds") %>% filter(LGA=="Queanbeyan")
vic <- readRDS("act/lga_loc_poa.rds") #%>% filter(LGA=="Wodonga")
nsw <- readRDS("nsw/lga_loc_poa.rds") %>% filter(LGA=="Queanbeyan-Palerang")
nsw <- readRDS("nsw/lga_loc_poa.rds") %>% filter(LGA=="Queanbeyan-Palerang")
nsw <- readRDS("nsw/lga_loc_poa.rds") %>% filter(grepl("Queanbeyan",LGA))
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
st_collection_extract("POLYGON") %>%
drop_crumbs(.,threshold = units::set_units(10^5,m^2))
vic <- readRDS("act/lga_loc_poa.rds") %>% select(-ROW_ID)
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
st_collection_extract("POLYGON") %>%
drop_crumbs(.,threshold = units::set_units(10^5,m^2))
nsw <- readRDS("nsw/lga_loc_poa.rds") %>% filter(grepl("Queanbeyan",LGA)) %>% select(-ABB_NAME)
vic <- readRDS("act/lga_loc_poa.rds") %>% select(-ROW_ID)
mapdata <- rbind(nsw,vic) %>% group_by(POA_CODE16) %>%
summarise(.groups = "drop") %>%
st_collection_extract("POLYGON") %>%
drop_crumbs(.,threshold = units::set_units(10^5,m^2))
mapdata %>% ggplot() + geom_sf(aes(fill=POA_CODE16)) +customthemes::custom_map_theme()
### Create spatial polygons for different divisions in ACT, Australia
# Load/Install pacman
if(!require(pacman)) install.packages("pacman", repos = "http://cran.us.r-project.org")
if(!require(absmapsdata)) devtools::install_github("wfmackey/absmapsdata")
devotools::install_github("wfmackey/absmaps")
#use pacman to install all other packages
pacman::p_load("tidyverse","rgdal","sf","lwgeom","spdep","geojsonsf","rgeos","smoothr",
"rvest","xml2","stringi","units","absmapsdata")
source("code/clean_lga.R")
## get list of  councils across state
area_tolerance <-set_units(10^4,m^2)
area_tolerance2 <-set_units(10^4,m^2)
area_tolerance3 <-set_units(0.3,1)
State <-"ACT"
State_folder <- "act/"
State_poa <-  as.character(c(2600:2618,2900:2920,2620))
rm(nt_lgas_list,wiki_page)
#Download all shapefiles
shp_files <- tribble(~name,~filename,~url,
"LOC","ACT_LOCALITY_POLYGON_SHP-GDA2020.shp","https://data.gov.au/data/dataset/0257a9da-b558-4d86-a987-535c775cf8d8/resource/b91e5877-5426-416d-99c6-355d15d2c461/download/act_locality_polygon_shp-gda2020.zip",
"POA","POA_2016_AUST.shp","https://www.abs.gov.au/ausstats/subscriber.nsf/log?openagent&1270055003_poa_2016_aust_shape.zip&1270.0.55.003&Data%20Cubes&4FB811FA48EECA7ACA25802C001432D0&0&July%202016&13.09.2016&Previous"
)
## download act shapfiles
shapes <- map(1:nrow(shp_files), function(x,shp_files){
if(!file.exists(shp_files[x,]$filename)){
download.file(shp_files[x,]$url,"temp.zip")
unzip("temp.zip")
file.remove("temp.zip")
}
st_read(shp_files[x,]$filename)
},shp_files)
names(shapes) <- shp_files %>% pull(name)
#filter POAS , standardise names
shapes$POA <- shapes$POA %>% filter(POA_CODE16 %in% State_poa)
shapes$LOC <- st_buffer(shapes$LOC,0)
#shapes$LOC <- shapes$LOC %>% rename(NAME=TAS_LOCA_2)
loc_lga <- shapes$LOC %>%
rename(LOCALITY=NAME) %>%
mutate(ROW_ID=row_number(), LOCALITY=stri_trans_totitle(tolower(LOCALITY))) %>%
select(ROW_ID,LOC_PID,LOCALITY)   %>%
mutate(LGA_PID="none",LGA="Canberra",State.Region="",Metro.Region="",State="Australian Capital Territory")
#plot(loc_lga %>%  select(LGA))
rm(list=ls()[! ls() %in% c("loc_lga","shapes","clean_lga","area_tolerance","area_tolerance2","State","State_folder","State_poa")])
#merge with poa
loc_lga<-st_transform(loc_lga,st_crs(shapes$POA))
loc_lga_poa1 <- map_df(1:nrow(loc_lga),function(x,lga_loc_polygon,poa_polygon){
#message(x)
a <- st_intersection(poa_polygon,lga_loc_polygon[x,]) %>%
st_collection_extract("POLYGON")
if(nrow(a)==0){
lga_loc_polygon[x,] %>% mutate(POA_CODE16="none",
AREA=st_area(.),
RELEVANT=TRUE)
}else{
#message(nrow(a))
a %>% st_cast("MULTILINESTRING") %>% st_cast("LINESTRING") %>%
st_collection_extract("LINESTRING") %>%
st_polygonize() %>%
mutate(AREA=st_area(.), RELEVANT=(AREA>area_tolerance)) %>%
select(POA_CODE16,colnames(lga_loc_polygon),AREA,RELEVANT)
}
},loc_lga, shapes$POA)
#fill missing POAS - not relevant for tassie
#loc_lga_poa1 <- loc_lga_poa1 %>% filter((POA_CODE16=="none"))
#missing<-as.data.frame(loc_lga_poa1) %>% filter(POA_CODE16=="none" & RELEVANT) %>% select(LOC_PID,LOCALITY,AREA,-geometry) %>% unique(.)
missing_poas <- tribble(~LOC_PID,~missingPOA,
"ACT707","2914",
"ACT614","2906",
"ACT905","2620",
"ACT719","2914",
"ACT619","2905",
"ACT925","2620",
"ACT611","2905",
"ACT903","2913",
"ACT609","2905",
"ACT613","2906",
"ACT605","2904",
"ACT716","2914",
"ACT902","2913",
"ACT608","2905",
"ACT616","2906",
"ACT604","2904",
"ACT615","2900",
"ACT710","2912",
"ACT711","2914",
"ACT612","2905",
"ACT928","2914",
"ACT601","2902",
"ACT606","2904",
"ACT603","2904",
"ACT932","2914",
"ACT920","2620",
"ACT706","2913",
"ACT708","2913",
"ACT623","2903",
"ACT709","2913",
"ACT922","2620",
"ACT607","2905",
"ACT934","2913",
"ACT659","2620",
"ACT610","2905",
"ACT933","2914",
"ACT602","2903",
"ACT701","2911",
"ACT924","2620",
"ACT913","2900",
"ACT801","2620",
"ACT802","2620"
)
#double_poas <- c("3000","3001","3004")
#double_pas_loc <-c("TAS1634")
loc_lga_poa1 <- loc_lga_poa1 %>%
left_join(missing_poas,by="LOC_PID") %>%
mutate(POA_CODE16=str_trim(POA_CODE16)) %>%
mutate(POA_CODE16=if_else(POA_CODE16=="none",missingPOA,str_trim(POA_CODE16))) %>%
#                    filter(!(POA_CODE16 %in% double_poas)) %>%
#                    filter(!(LOC_PID %in% double_pas_loc)) %>%
select(-missingPOA)
#loc_lga_poa11 %>% filter(POA_CODE16=="7000")
#relevance
loc_lga_poa_table <- as.data.frame(loc_lga_poa1) %>% select(-geometry) %>%
#filter(RELEVANT) %>%
select(LOC_PID,LGA_PID,LOCALITY,LGA,POA_CODE16,AREA) %>%
group_by(LOC_PID,LGA_PID,LOCALITY,LGA) %>%
mutate(AREA_REL=AREA/sum(AREA)) %>%
slice_max(order_by=AREA_REL,n=1) %>%
#filter(AREA_REL>=area_tolerance3) %>%
#filter(AREA_REL==max(AREA_REL)) %>%
ungroup()
loc_lga_poa_a <-  loc_lga %>%
left_join (loc_lga_poa_table %>%
select(LOC_PID,LGA_PID,POA_CODE16),
by=c("LOC_PID","LGA_PID")) %>%
filter(!is.na(POA_CODE16))
#plot(loc_lga_poa_a %>% select(POA_CODE16))
## special areas in missing_poas
#loc_lga_remnant <- loc_lga %>% filter(LOC_PID %in% double_pas_loc)
#poa_remnant <- shapes$POA %>% filter(POA_CODE16 %in% double_poas)
#loc_lga_poa_b <- st_intersection(loc_lga_remnant,poa_remnant) %>% select(colnames(loc_lga_poa_a))
###join and clean up
#loc_lga_poa <- rbind(loc_lga_poa_a,loc_lga_poa_b)
loc_lga_poa <-loc_lga_poa_a %>% select(-ROW_ID) %>% mutate(ABB_NAME=toupper(LGA))
rm(list=ls()[! ls() %in% c("loc_lga_poa","shapes","area_tolerance","area_tolerance2","State_folder")])
saveRDS(loc_lga_poa,str_c(State_folder,"lga_loc_poa.rds"))
